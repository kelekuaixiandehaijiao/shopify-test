<!-- Extend - Add necessary SDK script tags and configure the store -->
<script src="https://sdk.helloextend.com/extend-sdk-client/v1/extend-sdk-client.min.js"></script>
<script
    src="https://sdk.helloextend.com/extend-sdk-client-shopify-addon/v1/extend-sdk-client-shopify-addon.min.js"></script>
<script>
    Extend.config({ storeId: '7cacb493-04d4-4736-8e72-927530ac89fe', environment: 'production' });
    window.Extend.integration = {};

    // Extend - Analytics and writeLogs boolean
    window.Extend.integration.analytics = true;
    window.Extend.integration.writeLogs = false;

    // Extend - QA Cypress booleans
    window.Extend.integration.isExtendPdpOfferEnabled = true;
    window.Extend.integration.isExtendOfferModalEnabled = true;
    window.Extend.integration.isExtendMainCartOfferEnabled = true;

    // Only defines utils if Extend and ExtendShopify is defined
    if (window.Extend && window.ExtendShopify) {
        const extendUtils = {

            /*
            * takes in object and logs it if writeLogs is true
            * @param {object} objToLog will be an object of information to log
            */
            logger: (objToLog) => {
                try {
                    if (Extend.integration.writeLogs) {
                        console.log("EXTEND: ", objToLog);
                    }
                } catch (error) {
                    console.warn("EXTEND: " + error);
                }
            }
        };
        window.Extend.integration.utils = extendUtils;
    }
</script>

<script>
    // Wrapping the entire function in an iife gives access to the built in jQuery contained in the Checkout
    // https://shopify.dev/themes/architecture/layouts/checkout-liquid#checkout-jquery
    (function ($) {

        // If you add content to the Document Object Model (DOM) with only page:load, then thereâ€™s a risk that it could be overwritten by a page:change event.
        // To avoid this issue, you should watch for both events when adding content.
        $(document).on('page:load page:change', async function () {

            // Create the Extend shipping protection offer element
            const $extendShippingOfferElement = $('<div id="extend-shipping-offer"></div>')

            // Insert the offer into the order summary sidebar after it renders underneath the line item totals
            $('.order-summary__section--total-lines').first().after($extendShippingOfferElement)

            /*************************/
            /* Cart Mapper Helper    */
            /*************************/
            function cartMapper(cart) {
                try {
                    return cart.items.map(function (item) {
                        return {
                            referenceId: item.id.toString(),
                            quantity: item.quantity,
                            purchasePrice: item.price,
                            productName: item.title
                        }
                    });
                    //returns null if mapping fails
                } catch (error) {
                    console.error("EXTEND: " + error);
                    return null;
                }
            }

            //check if Extend and ExtendShopify SDK are loaded
            if (window.Extend && window.Extend.shippingProtection && window.ExtendShopify) {
                const extendUtils = window.Extend.integration.utils;
                const extendLogger = extendUtils.logger;

                //return cart if successful fetch else set to null
                let cart = await fetch('/cart.js')
                    .then((result) => {
                        return result.json()
                    })
                    .catch((error) => {
                        console.error("EXTEND: Failed to fetch - ", error)
                    });

                const mappedCartItems = cartMapper(cart);

                //check if shippingProtection is loaded and mappedCartItems is not null
                if (mappedCartItems) {

                    const isShippingProtectionInCart = ExtendShopify.shippingProtectionInCart(cart.items)

                    Extend.shippingProtection.render({
                        selector: '#extend-shipping-offer',
                        items: mappedCartItems,
                        isShippingProtectionInCart: isShippingProtectionInCart,
                        onEnable: function (quote) {
                            extendLogger({ "onEnable": quote });

                            try {
                                ExtendShopify.addSpPlanToCart({
                                    quote,
                                    callback: function (err, resp) {
                                        extendLogger({ "onEnable err": err, "onEnable response": resp })

                                        // an error occurred
                                        if (err) {
                                            throw new Error(JSON.stringify(err));
                                        } else {
                                            window.location.reload();
                                        }
                                    }
                                })
                            } catch (error) {
                                console.error("EXTEND: " + error);
                            }

                        },
                        onDisable: function (quote) {
                            extendLogger({ "onDisable": quote });

                            try {
                                ExtendShopify.updateSpPlanInCart({
                                    action: 'remove',
                                    cart: cart,
                                    callback: function (err, resp) {
                                        extendLogger({ "onDisable err": err, "onDisable response": resp })

                                        // an error occurred
                                        if (err) {
                                            throw new Error(JSON.stringify(err));
                                        } else {
                                            if (resp.isUpdated) window.location.reload();
                                        }
                                    }
                                })
                            } catch (error) {
                                console.error("EXTEND: " + error);
                            }
                        },
                        onUpdate: function (quote) {
                            extendLogger({ "onUpdate": quote });

                            try {
                                ExtendShopify.updateSpPlanInCart({
                                    action: 'update',
                                    cart: cart,
                                    quote: quote,
                                    callback: function (err, resp) {
                                        extendLogger({ "onUpdate err": err, "onUpdate response": resp })

                                        // an error occurred
                                        if (err) {
                                            throw new Error(JSON.stringify(err));
                                        } else {
                                            //if (resp.isUpdated) window.location.reload();
                                        }
                                    }
                                })
                            } catch (error) {
                                console.error("EXTEND: " + error);
                            }
                        }
                    })
                } else {
                    console.error("EXTEND: Missing Extend.shippingProtection or mappedCartItems");
                }
            } else {
                console.error("EXTEND: Missing Extend SDK");
            }
        })
    })(Checkout.$);
</script>
<style>
    #extend-shipping-offer {
        display: flex;
        justify-content: flex-end;
    }

    @media(max-width: 749px) {
        #extend-shipping-offer {
            justify-content: end;
        }
    }
</style>